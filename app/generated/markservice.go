// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generated

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MarkService interface {
	// Parameters:
	//  - MarkID
	FindMarkByID(markID string) (r *Mark, err error)
	// Parameters:
	//  - ClientID
	FindMarkByClientID(clientID string) (r *Mark, err error)
	// Parameters:
	//  - Limit
	//  - Offset
	FindMarkAll(limit int64, offset int64) (r []*Mark, err error)
	// Parameters:
	//  - Mark
	UpdateMark(mark *Mark) (r *Mark, err error)
}

type MarkServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMarkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MarkServiceClient {
	return &MarkServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMarkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MarkServiceClient {
	return &MarkServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - MarkID
func (p *MarkServiceClient) FindMarkByID(markID string) (r *Mark, err error) {
	if err = p.sendFindMarkByID(markID); err != nil {
		return
	}
	return p.recvFindMarkByID()
}

func (p *MarkServiceClient) sendFindMarkByID(markID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findMarkByID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindMarkByIDArgs{
		MarkID: markID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MarkServiceClient) recvFindMarkByID() (value *Mark, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error109 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error110 error
		error110, err = error109.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error110
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findMarkByID failed: out of sequence response")
		return
	}
	result := FindMarkByIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClientID
func (p *MarkServiceClient) FindMarkByClientID(clientID string) (r *Mark, err error) {
	if err = p.sendFindMarkByClientID(clientID); err != nil {
		return
	}
	return p.recvFindMarkByClientID()
}

func (p *MarkServiceClient) sendFindMarkByClientID(clientID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findMarkByClientID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindMarkByClientIDArgs{
		ClientID: clientID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MarkServiceClient) recvFindMarkByClientID() (value *Mark, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findMarkByClientID failed: out of sequence response")
		return
	}
	result := FindMarkByClientIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Limit
//  - Offset
func (p *MarkServiceClient) FindMarkAll(limit int64, offset int64) (r []*Mark, err error) {
	if err = p.sendFindMarkAll(limit, offset); err != nil {
		return
	}
	return p.recvFindMarkAll()
}

func (p *MarkServiceClient) sendFindMarkAll(limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findMarkAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindMarkAllArgs{
		Limit:  limit,
		Offset: offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MarkServiceClient) recvFindMarkAll() (value []*Mark, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error113 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error114 error
		error114, err = error113.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error114
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findMarkAll failed: out of sequence response")
		return
	}
	result := FindMarkAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mark
func (p *MarkServiceClient) UpdateMark(mark *Mark) (r *Mark, err error) {
	if err = p.sendUpdateMark(mark); err != nil {
		return
	}
	return p.recvUpdateMark()
}

func (p *MarkServiceClient) sendUpdateMark(mark *Mark) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateMark", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateMarkArgs{
		Mark: mark,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MarkServiceClient) recvUpdateMark() (value *Mark, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateMark failed: out of sequence response")
		return
	}
	result := UpdateMarkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MarkServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MarkService
}

func (p *MarkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MarkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MarkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMarkServiceProcessor(handler MarkService) *MarkServiceProcessor {

	self117 := &MarkServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self117.processorMap["findMarkByID"] = &markServiceProcessorFindMarkByID{handler: handler}
	self117.processorMap["findMarkByClientID"] = &markServiceProcessorFindMarkByClientID{handler: handler}
	self117.processorMap["findMarkAll"] = &markServiceProcessorFindMarkAll{handler: handler}
	self117.processorMap["updateMark"] = &markServiceProcessorUpdateMark{handler: handler}
	return self117
}

func (p *MarkServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x118 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x118.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x118

}

type markServiceProcessorFindMarkByID struct {
	handler MarkService
}

func (p *markServiceProcessorFindMarkByID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindMarkByIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findMarkByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindMarkByIDResult{}
	var retval *Mark
	var err2 error
	if retval, err2 = p.handler.FindMarkByID(args.MarkID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findMarkByID: "+err2.Error())
		oprot.WriteMessageBegin("findMarkByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findMarkByID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type markServiceProcessorFindMarkByClientID struct {
	handler MarkService
}

func (p *markServiceProcessorFindMarkByClientID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindMarkByClientIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findMarkByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindMarkByClientIDResult{}
	var retval *Mark
	var err2 error
	if retval, err2 = p.handler.FindMarkByClientID(args.ClientID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findMarkByClientID: "+err2.Error())
		oprot.WriteMessageBegin("findMarkByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findMarkByClientID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type markServiceProcessorFindMarkAll struct {
	handler MarkService
}

func (p *markServiceProcessorFindMarkAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindMarkAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findMarkAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindMarkAllResult{}
	var retval []*Mark
	var err2 error
	if retval, err2 = p.handler.FindMarkAll(args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findMarkAll: "+err2.Error())
		oprot.WriteMessageBegin("findMarkAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findMarkAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type markServiceProcessorUpdateMark struct {
	handler MarkService
}

func (p *markServiceProcessorUpdateMark) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateMarkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateMark", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateMarkResult{}
	var retval *Mark
	var err2 error
	if retval, err2 = p.handler.UpdateMark(args.Mark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateMark: "+err2.Error())
		oprot.WriteMessageBegin("updateMark", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateMark", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FindMarkByIDArgs struct {
	MarkID string `thrift:"markID,1" json:"markID"`
}

func NewFindMarkByIDArgs() *FindMarkByIDArgs {
	return &FindMarkByIDArgs{}
}

func (p *FindMarkByIDArgs) GetMarkID() string {
	return p.MarkID
}
func (p *FindMarkByIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MarkID = v
	}
	return nil
}

func (p *FindMarkByIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkByID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("markID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:markID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MarkID)); err != nil {
		return fmt.Errorf("%T.markID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:markID: %s", p, err)
	}
	return err
}

func (p *FindMarkByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkByIDArgs(%+v)", *p)
}

type FindMarkByIDResult struct {
	Success *Mark `thrift:"success,0" json:"success"`
}

func NewFindMarkByIDResult() *FindMarkByIDResult {
	return &FindMarkByIDResult{}
}

var FindMarkByIDResult_Success_DEFAULT *Mark

func (p *FindMarkByIDResult) GetSuccess() *Mark {
	if !p.IsSetSuccess() {
		return FindMarkByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FindMarkByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindMarkByIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkByIDResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Mark{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindMarkByIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkByID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindMarkByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkByIDResult(%+v)", *p)
}

type FindMarkByClientIDArgs struct {
	ClientID string `thrift:"clientID,1" json:"clientID"`
}

func NewFindMarkByClientIDArgs() *FindMarkByClientIDArgs {
	return &FindMarkByClientIDArgs{}
}

func (p *FindMarkByClientIDArgs) GetClientID() string {
	return p.ClientID
}
func (p *FindMarkByClientIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkByClientIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ClientID = v
	}
	return nil
}

func (p *FindMarkByClientIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkByClientID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkByClientIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientID)); err != nil {
		return fmt.Errorf("%T.clientID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientID: %s", p, err)
	}
	return err
}

func (p *FindMarkByClientIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkByClientIDArgs(%+v)", *p)
}

type FindMarkByClientIDResult struct {
	Success *Mark `thrift:"success,0" json:"success"`
}

func NewFindMarkByClientIDResult() *FindMarkByClientIDResult {
	return &FindMarkByClientIDResult{}
}

var FindMarkByClientIDResult_Success_DEFAULT *Mark

func (p *FindMarkByClientIDResult) GetSuccess() *Mark {
	if !p.IsSetSuccess() {
		return FindMarkByClientIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FindMarkByClientIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindMarkByClientIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkByClientIDResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Mark{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindMarkByClientIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkByClientID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkByClientIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindMarkByClientIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkByClientIDResult(%+v)", *p)
}

type FindMarkAllArgs struct {
	Limit  int64 `thrift:"limit,1" json:"limit"`
	Offset int64 `thrift:"offset,2" json:"offset"`
}

func NewFindMarkAllArgs() *FindMarkAllArgs {
	return &FindMarkAllArgs{}
}

func (p *FindMarkAllArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindMarkAllArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindMarkAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindMarkAllArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindMarkAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkAll_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:limit: %s", p, err)
	}
	return err
}

func (p *FindMarkAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:offset: %s", p, err)
	}
	return err
}

func (p *FindMarkAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkAllArgs(%+v)", *p)
}

type FindMarkAllResult struct {
	Success []*Mark `thrift:"success,0" json:"success"`
}

func NewFindMarkAllResult() *FindMarkAllResult {
	return &FindMarkAllResult{}
}

var FindMarkAllResult_Success_DEFAULT []*Mark

func (p *FindMarkAllResult) GetSuccess() []*Mark {
	return p.Success
}
func (p *FindMarkAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindMarkAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindMarkAllResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Mark, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem119 := &Mark{}
		if err := _elem119.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem119, err)
		}
		p.Success = append(p.Success, _elem119)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindMarkAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findMarkAll_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindMarkAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindMarkAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindMarkAllResult(%+v)", *p)
}

type UpdateMarkArgs struct {
	Mark *Mark `thrift:"mark,1" json:"mark"`
}

func NewUpdateMarkArgs() *UpdateMarkArgs {
	return &UpdateMarkArgs{}
}

var UpdateMarkArgs_Mark_DEFAULT *Mark

func (p *UpdateMarkArgs) GetMark() *Mark {
	if !p.IsSetMark() {
		return UpdateMarkArgs_Mark_DEFAULT
	}
	return p.Mark
}
func (p *UpdateMarkArgs) IsSetMark() bool {
	return p.Mark != nil
}

func (p *UpdateMarkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateMarkArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Mark = &Mark{}
	if err := p.Mark.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Mark, err)
	}
	return nil
}

func (p *UpdateMarkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateMark_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateMarkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mark", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mark: %s", p, err)
	}
	if err := p.Mark.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Mark, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mark: %s", p, err)
	}
	return err
}

func (p *UpdateMarkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMarkArgs(%+v)", *p)
}

type UpdateMarkResult struct {
	Success *Mark `thrift:"success,0" json:"success"`
}

func NewUpdateMarkResult() *UpdateMarkResult {
	return &UpdateMarkResult{}
}

var UpdateMarkResult_Success_DEFAULT *Mark

func (p *UpdateMarkResult) GetSuccess() *Mark {
	if !p.IsSetSuccess() {
		return UpdateMarkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateMarkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMarkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateMarkResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Mark{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateMarkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateMark_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateMarkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateMarkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMarkResult(%+v)", *p)
}
