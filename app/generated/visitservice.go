// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generated

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type VisitService interface {
	// Parameters:
	//  - VisitID
	FindByID(visitID string) (r *Visit, err error)
	// Parameters:
	//  - Limit
	//  - Offset
	FindAll(limit int64, offset int64) (r []*Visit, err error)
	// Parameters:
	//  - SessionID
	//  - Limit
	//  - Offset
	FindAllBySessionID(sessionID string, limit int64, offset int64) (r []*Visit, err error)
	// Parameters:
	//  - ClientID
	//  - Limit
	//  - Offset
	FindAllByClientID(clientID string, limit int64, offset int64) (r []*Visit, err error)
}

type VisitServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewVisitServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VisitServiceClient {
	return &VisitServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewVisitServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VisitServiceClient {
	return &VisitServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - VisitID
func (p *VisitServiceClient) FindByID(visitID string) (r *Visit, err error) {
	if err = p.sendFindByID(visitID); err != nil {
		return
	}
	return p.recvFindByID()
}

func (p *VisitServiceClient) sendFindByID(visitID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findByID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindByIDArgs{
		VisitID: visitID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindByID() (value *Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findByID failed: out of sequence response")
		return
	}
	result := FindByIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindAll(limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindAll(limit, offset); err != nil {
		return
	}
	return p.recvFindAll()
}

func (p *VisitServiceClient) sendFindAll(limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAllArgs{
		Limit:  limit,
		Offset: offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindAll() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAll failed: out of sequence response")
		return
	}
	result := FindAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindAllBySessionID(sessionID string, limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindAllBySessionID(sessionID, limit, offset); err != nil {
		return
	}
	return p.recvFindAllBySessionID()
}

func (p *VisitServiceClient) sendFindAllBySessionID(sessionID string, limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAllBySessionID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAllBySessionIDArgs{
		SessionID: sessionID,
		Limit:     limit,
		Offset:    offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindAllBySessionID() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAllBySessionID failed: out of sequence response")
		return
	}
	result := FindAllBySessionIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClientID
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindAllByClientID(clientID string, limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindAllByClientID(clientID, limit, offset); err != nil {
		return
	}
	return p.recvFindAllByClientID()
}

func (p *VisitServiceClient) sendFindAllByClientID(clientID string, limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAllByClientID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAllByClientIDArgs{
		ClientID: clientID,
		Limit:    limit,
		Offset:   offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindAllByClientID() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAllByClientID failed: out of sequence response")
		return
	}
	result := FindAllByClientIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VisitServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VisitService
}

func (p *VisitServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VisitServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VisitServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVisitServiceProcessor(handler VisitService) *VisitServiceProcessor {

	self24 := &VisitServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self24.processorMap["findByID"] = &visitServiceProcessorFindByID{handler: handler}
	self24.processorMap["findAll"] = &visitServiceProcessorFindAll{handler: handler}
	self24.processorMap["findAllBySessionID"] = &visitServiceProcessorFindAllBySessionID{handler: handler}
	self24.processorMap["findAllByClientID"] = &visitServiceProcessorFindAllByClientID{handler: handler}
	return self24
}

func (p *VisitServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x25.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x25

}

type visitServiceProcessorFindByID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindByID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindByIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindByIDResult{}
	var retval *Visit
	var err2 error
	if retval, err2 = p.handler.FindByID(args.VisitID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findByID: "+err2.Error())
		oprot.WriteMessageBegin("findByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findByID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindAll struct {
	handler VisitService
}

func (p *visitServiceProcessorFindAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAllResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindAll(args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAll: "+err2.Error())
		oprot.WriteMessageBegin("findAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindAllBySessionID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindAllBySessionID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAllBySessionIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAllBySessionID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAllBySessionIDResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindAllBySessionID(args.SessionID, args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAllBySessionID: "+err2.Error())
		oprot.WriteMessageBegin("findAllBySessionID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAllBySessionID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindAllByClientID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindAllByClientID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAllByClientIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAllByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAllByClientIDResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindAllByClientID(args.ClientID, args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAllByClientID: "+err2.Error())
		oprot.WriteMessageBegin("findAllByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAllByClientID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FindByIDArgs struct {
	VisitID string `thrift:"visitID,1" json:"visitID"`
}

func NewFindByIDArgs() *FindByIDArgs {
	return &FindByIDArgs{}
}

func (p *FindByIDArgs) GetVisitID() string {
	return p.VisitID
}
func (p *FindByIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VisitID = v
	}
	return nil
}

func (p *FindByIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findByID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visitID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:visitID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VisitID)); err != nil {
		return fmt.Errorf("%T.visitID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:visitID: %s", p, err)
	}
	return err
}

func (p *FindByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindByIDArgs(%+v)", *p)
}

type FindByIDResult struct {
	Success *Visit `thrift:"success,0" json:"success"`
}

func NewFindByIDResult() *FindByIDResult {
	return &FindByIDResult{}
}

var FindByIDResult_Success_DEFAULT *Visit

func (p *FindByIDResult) GetSuccess() *Visit {
	if !p.IsSetSuccess() {
		return FindByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FindByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindByIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindByIDResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Visit{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindByIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findByID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindByIDResult(%+v)", *p)
}

type FindAllArgs struct {
	Limit  int64 `thrift:"limit,1" json:"limit"`
	Offset int64 `thrift:"offset,2" json:"offset"`
}

func NewFindAllArgs() *FindAllArgs {
	return &FindAllArgs{}
}

func (p *FindAllArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindAllArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindAllArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAll_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:limit: %s", p, err)
	}
	return err
}

func (p *FindAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:offset: %s", p, err)
	}
	return err
}

func (p *FindAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllArgs(%+v)", *p)
}

type FindAllResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindAllResult() *FindAllResult {
	return &FindAllResult{}
}

var FindAllResult_Success_DEFAULT []*Visit

func (p *FindAllResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &Visit{}
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26, err)
		}
		p.Success = append(p.Success, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAll_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllResult(%+v)", *p)
}

type FindAllBySessionIDArgs struct {
	SessionID string `thrift:"sessionID,1" json:"sessionID"`
	Limit     int64  `thrift:"limit,2" json:"limit"`
	Offset    int64  `thrift:"offset,3" json:"offset"`
}

func NewFindAllBySessionIDArgs() *FindAllBySessionIDArgs {
	return &FindAllBySessionIDArgs{}
}

func (p *FindAllBySessionIDArgs) GetSessionID() string {
	return p.SessionID
}

func (p *FindAllBySessionIDArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindAllBySessionIDArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindAllBySessionIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllBySessionIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *FindAllBySessionIDArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindAllBySessionIDArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindAllBySessionIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllBySessionID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllBySessionIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *FindAllBySessionIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:limit: %s", p, err)
	}
	return err
}

func (p *FindAllBySessionIDArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindAllBySessionIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllBySessionIDArgs(%+v)", *p)
}

type FindAllBySessionIDResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindAllBySessionIDResult() *FindAllBySessionIDResult {
	return &FindAllBySessionIDResult{}
}

var FindAllBySessionIDResult_Success_DEFAULT []*Visit

func (p *FindAllBySessionIDResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindAllBySessionIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAllBySessionIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllBySessionIDResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &Visit{}
		if err := _elem27.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem27, err)
		}
		p.Success = append(p.Success, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindAllBySessionIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllBySessionID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllBySessionIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAllBySessionIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllBySessionIDResult(%+v)", *p)
}

type FindAllByClientIDArgs struct {
	ClientID string `thrift:"clientID,1" json:"clientID"`
	Limit    int64  `thrift:"limit,2" json:"limit"`
	Offset   int64  `thrift:"offset,3" json:"offset"`
}

func NewFindAllByClientIDArgs() *FindAllByClientIDArgs {
	return &FindAllByClientIDArgs{}
}

func (p *FindAllByClientIDArgs) GetClientID() string {
	return p.ClientID
}

func (p *FindAllByClientIDArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindAllByClientIDArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindAllByClientIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllByClientIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ClientID = v
	}
	return nil
}

func (p *FindAllByClientIDArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindAllByClientIDArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindAllByClientIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllByClientID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllByClientIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientID)); err != nil {
		return fmt.Errorf("%T.clientID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientID: %s", p, err)
	}
	return err
}

func (p *FindAllByClientIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:limit: %s", p, err)
	}
	return err
}

func (p *FindAllByClientIDArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindAllByClientIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllByClientIDArgs(%+v)", *p)
}

type FindAllByClientIDResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindAllByClientIDResult() *FindAllByClientIDResult {
	return &FindAllByClientIDResult{}
}

var FindAllByClientIDResult_Success_DEFAULT []*Visit

func (p *FindAllByClientIDResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindAllByClientIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAllByClientIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAllByClientIDResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &Visit{}
		if err := _elem28.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem28, err)
		}
		p.Success = append(p.Success, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindAllByClientIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAllByClientID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAllByClientIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAllByClientIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAllByClientIDResult(%+v)", *p)
}
