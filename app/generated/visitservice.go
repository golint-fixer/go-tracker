// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generated

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type VisitService interface {
	// Parameters:
	//  - VisitID
	FindVisitByID(visitID string) (r *Visit, err error)
	// Parameters:
	//  - Limit
	//  - Offset
	FindVisitAll(limit int64, offset int64) (r []*Visit, err error)
	// Parameters:
	//  - SessionID
	//  - Limit
	//  - Offset
	FindVisitAllBySessionID(sessionID string, limit int64, offset int64) (r []*Visit, err error)
	// Parameters:
	//  - ClientID
	//  - Limit
	//  - Offset
	FindVisitAllByClientID(clientID string, limit int64, offset int64) (r []*Visit, err error)
}

type VisitServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewVisitServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VisitServiceClient {
	return &VisitServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewVisitServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VisitServiceClient {
	return &VisitServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - VisitID
func (p *VisitServiceClient) FindVisitByID(visitID string) (r *Visit, err error) {
	if err = p.sendFindVisitByID(visitID); err != nil {
		return
	}
	return p.recvFindVisitByID()
}

func (p *VisitServiceClient) sendFindVisitByID(visitID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findVisitByID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindVisitByIDArgs{
		VisitID: visitID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindVisitByID() (value *Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findVisitByID failed: out of sequence response")
		return
	}
	result := FindVisitByIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindVisitAll(limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindVisitAll(limit, offset); err != nil {
		return
	}
	return p.recvFindVisitAll()
}

func (p *VisitServiceClient) sendFindVisitAll(limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findVisitAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindVisitAllArgs{
		Limit:  limit,
		Offset: offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindVisitAll() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findVisitAll failed: out of sequence response")
		return
	}
	result := FindVisitAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionID
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindVisitAllBySessionID(sessionID string, limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindVisitAllBySessionID(sessionID, limit, offset); err != nil {
		return
	}
	return p.recvFindVisitAllBySessionID()
}

func (p *VisitServiceClient) sendFindVisitAllBySessionID(sessionID string, limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findVisitAllBySessionID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindVisitAllBySessionIDArgs{
		SessionID: sessionID,
		Limit:     limit,
		Offset:    offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindVisitAllBySessionID() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findVisitAllBySessionID failed: out of sequence response")
		return
	}
	result := FindVisitAllBySessionIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ClientID
//  - Limit
//  - Offset
func (p *VisitServiceClient) FindVisitAllByClientID(clientID string, limit int64, offset int64) (r []*Visit, err error) {
	if err = p.sendFindVisitAllByClientID(clientID, limit, offset); err != nil {
		return
	}
	return p.recvFindVisitAllByClientID()
}

func (p *VisitServiceClient) sendFindVisitAllByClientID(clientID string, limit int64, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findVisitAllByClientID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindVisitAllByClientIDArgs{
		ClientID: clientID,
		Limit:    limit,
		Offset:   offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VisitServiceClient) recvFindVisitAllByClientID() (value []*Visit, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findVisitAllByClientID failed: out of sequence response")
		return
	}
	result := FindVisitAllByClientIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VisitServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VisitService
}

func (p *VisitServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VisitServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VisitServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVisitServiceProcessor(handler VisitService) *VisitServiceProcessor {

	self24 := &VisitServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self24.processorMap["findVisitByID"] = &visitServiceProcessorFindVisitByID{handler: handler}
	self24.processorMap["findVisitAll"] = &visitServiceProcessorFindVisitAll{handler: handler}
	self24.processorMap["findVisitAllBySessionID"] = &visitServiceProcessorFindVisitAllBySessionID{handler: handler}
	self24.processorMap["findVisitAllByClientID"] = &visitServiceProcessorFindVisitAllByClientID{handler: handler}
	return self24
}

func (p *VisitServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x25.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x25

}

type visitServiceProcessorFindVisitByID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindVisitByID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindVisitByIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findVisitByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindVisitByIDResult{}
	var retval *Visit
	var err2 error
	if retval, err2 = p.handler.FindVisitByID(args.VisitID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findVisitByID: "+err2.Error())
		oprot.WriteMessageBegin("findVisitByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findVisitByID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindVisitAll struct {
	handler VisitService
}

func (p *visitServiceProcessorFindVisitAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindVisitAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findVisitAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindVisitAllResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindVisitAll(args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findVisitAll: "+err2.Error())
		oprot.WriteMessageBegin("findVisitAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findVisitAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindVisitAllBySessionID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindVisitAllBySessionID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindVisitAllBySessionIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findVisitAllBySessionID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindVisitAllBySessionIDResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindVisitAllBySessionID(args.SessionID, args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findVisitAllBySessionID: "+err2.Error())
		oprot.WriteMessageBegin("findVisitAllBySessionID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findVisitAllBySessionID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type visitServiceProcessorFindVisitAllByClientID struct {
	handler VisitService
}

func (p *visitServiceProcessorFindVisitAllByClientID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindVisitAllByClientIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findVisitAllByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindVisitAllByClientIDResult{}
	var retval []*Visit
	var err2 error
	if retval, err2 = p.handler.FindVisitAllByClientID(args.ClientID, args.Limit, args.Offset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findVisitAllByClientID: "+err2.Error())
		oprot.WriteMessageBegin("findVisitAllByClientID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findVisitAllByClientID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FindVisitByIDArgs struct {
	VisitID string `thrift:"visitID,1" json:"visitID"`
}

func NewFindVisitByIDArgs() *FindVisitByIDArgs {
	return &FindVisitByIDArgs{}
}

func (p *FindVisitByIDArgs) GetVisitID() string {
	return p.VisitID
}
func (p *FindVisitByIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VisitID = v
	}
	return nil
}

func (p *FindVisitByIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitByID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visitID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:visitID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VisitID)); err != nil {
		return fmt.Errorf("%T.visitID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:visitID: %s", p, err)
	}
	return err
}

func (p *FindVisitByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitByIDArgs(%+v)", *p)
}

type FindVisitByIDResult struct {
	Success *Visit `thrift:"success,0" json:"success"`
}

func NewFindVisitByIDResult() *FindVisitByIDResult {
	return &FindVisitByIDResult{}
}

var FindVisitByIDResult_Success_DEFAULT *Visit

func (p *FindVisitByIDResult) GetSuccess() *Visit {
	if !p.IsSetSuccess() {
		return FindVisitByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FindVisitByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindVisitByIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitByIDResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Visit{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindVisitByIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitByID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindVisitByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitByIDResult(%+v)", *p)
}

type FindVisitAllArgs struct {
	Limit  int64 `thrift:"limit,1" json:"limit"`
	Offset int64 `thrift:"offset,2" json:"offset"`
}

func NewFindVisitAllArgs() *FindVisitAllArgs {
	return &FindVisitAllArgs{}
}

func (p *FindVisitAllArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindVisitAllArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindVisitAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindVisitAllArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindVisitAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAll_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:limit: %s", p, err)
	}
	return err
}

func (p *FindVisitAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:offset: %s", p, err)
	}
	return err
}

func (p *FindVisitAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllArgs(%+v)", *p)
}

type FindVisitAllResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindVisitAllResult() *FindVisitAllResult {
	return &FindVisitAllResult{}
}

var FindVisitAllResult_Success_DEFAULT []*Visit

func (p *FindVisitAllResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindVisitAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindVisitAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &Visit{}
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26, err)
		}
		p.Success = append(p.Success, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindVisitAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAll_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindVisitAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllResult(%+v)", *p)
}

type FindVisitAllBySessionIDArgs struct {
	SessionID string `thrift:"sessionID,1" json:"sessionID"`
	Limit     int64  `thrift:"limit,2" json:"limit"`
	Offset    int64  `thrift:"offset,3" json:"offset"`
}

func NewFindVisitAllBySessionIDArgs() *FindVisitAllBySessionIDArgs {
	return &FindVisitAllBySessionIDArgs{}
}

func (p *FindVisitAllBySessionIDArgs) GetSessionID() string {
	return p.SessionID
}

func (p *FindVisitAllBySessionIDArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindVisitAllBySessionIDArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindVisitAllBySessionIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllBySessionIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *FindVisitAllBySessionIDArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindVisitAllBySessionIDArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindVisitAllBySessionIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAllBySessionID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllBySessionIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionID: %s", p, err)
	}
	return err
}

func (p *FindVisitAllBySessionIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:limit: %s", p, err)
	}
	return err
}

func (p *FindVisitAllBySessionIDArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindVisitAllBySessionIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllBySessionIDArgs(%+v)", *p)
}

type FindVisitAllBySessionIDResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindVisitAllBySessionIDResult() *FindVisitAllBySessionIDResult {
	return &FindVisitAllBySessionIDResult{}
}

var FindVisitAllBySessionIDResult_Success_DEFAULT []*Visit

func (p *FindVisitAllBySessionIDResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindVisitAllBySessionIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindVisitAllBySessionIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllBySessionIDResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &Visit{}
		if err := _elem27.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem27, err)
		}
		p.Success = append(p.Success, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindVisitAllBySessionIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAllBySessionID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllBySessionIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindVisitAllBySessionIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllBySessionIDResult(%+v)", *p)
}

type FindVisitAllByClientIDArgs struct {
	ClientID string `thrift:"clientID,1" json:"clientID"`
	Limit    int64  `thrift:"limit,2" json:"limit"`
	Offset   int64  `thrift:"offset,3" json:"offset"`
}

func NewFindVisitAllByClientIDArgs() *FindVisitAllByClientIDArgs {
	return &FindVisitAllByClientIDArgs{}
}

func (p *FindVisitAllByClientIDArgs) GetClientID() string {
	return p.ClientID
}

func (p *FindVisitAllByClientIDArgs) GetLimit() int64 {
	return p.Limit
}

func (p *FindVisitAllByClientIDArgs) GetOffset() int64 {
	return p.Offset
}
func (p *FindVisitAllByClientIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllByClientIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ClientID = v
	}
	return nil
}

func (p *FindVisitAllByClientIDArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *FindVisitAllByClientIDArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindVisitAllByClientIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAllByClientID_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllByClientIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientID)); err != nil {
		return fmt.Errorf("%T.clientID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientID: %s", p, err)
	}
	return err
}

func (p *FindVisitAllByClientIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:limit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return fmt.Errorf("%T.limit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:limit: %s", p, err)
	}
	return err
}

func (p *FindVisitAllByClientIDArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindVisitAllByClientIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllByClientIDArgs(%+v)", *p)
}

type FindVisitAllByClientIDResult struct {
	Success []*Visit `thrift:"success,0" json:"success"`
}

func NewFindVisitAllByClientIDResult() *FindVisitAllByClientIDResult {
	return &FindVisitAllByClientIDResult{}
}

var FindVisitAllByClientIDResult_Success_DEFAULT []*Visit

func (p *FindVisitAllByClientIDResult) GetSuccess() []*Visit {
	return p.Success
}
func (p *FindVisitAllByClientIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindVisitAllByClientIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindVisitAllByClientIDResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Visit, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &Visit{}
		if err := _elem28.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem28, err)
		}
		p.Success = append(p.Success, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FindVisitAllByClientIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findVisitAllByClientID_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindVisitAllByClientIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindVisitAllByClientIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindVisitAllByClientIDResult(%+v)", *p)
}
