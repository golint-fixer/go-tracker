// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tracker

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Visit struct {
	VisitID   string            `thrift:"visitID,1" json:"visitID"`
	SessionID string            `thrift:"sessionID,2" json:"sessionID"`
	ClientID  string            `thrift:"clientID,3" json:"clientID"`
	Timestamp int64             `thrift:"timestamp,4" json:"timestamp"`
	Fields    map[string]string `thrift:"fields,5" json:"fields"`
}

func NewVisit() *Visit {
	return &Visit{}
}

func (p *Visit) GetVisitID() string {
	return p.VisitID
}

func (p *Visit) GetSessionID() string {
	return p.SessionID
}

func (p *Visit) GetClientID() string {
	return p.ClientID
}

func (p *Visit) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *Visit) GetFields() map[string]string {
	return p.Fields
}
func (p *Visit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Visit) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VisitID = v
	}
	return nil
}

func (p *Visit) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *Visit) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ClientID = v
	}
	return nil
}

func (p *Visit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Visit) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Fields = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Fields[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Visit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Visit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Visit) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visitID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:visitID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VisitID)); err != nil {
		return fmt.Errorf("%T.visitID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:visitID: %s", p, err)
	}
	return err
}

func (p *Visit) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionID)); err != nil {
		return fmt.Errorf("%T.sessionID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionID: %s", p, err)
	}
	return err
}

func (p *Visit) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientID", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:clientID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientID)); err != nil {
		return fmt.Errorf("%T.clientID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:clientID: %s", p, err)
	}
	return err
}

func (p *Visit) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
	}
	return err
}

func (p *Visit) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fields", thrift.MAP, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:fields: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Fields)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Fields {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:fields: %s", p, err)
	}
	return err
}

func (p *Visit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Visit(%+v)", *p)
}

type Event struct {
	EventID string            `thrift:"eventID,1" json:"eventID"`
	Enabled bool              `thrift:"enabled,2" json:"enabled"`
	Fields  map[string]string `thrift:"fields,3" json:"fields"`
	Filters map[string]string `thrift:"filters,4" json:"filters"`
}

func NewEvent() *Event {
	return &Event{}
}

func (p *Event) GetEventID() string {
	return p.EventID
}

func (p *Event) GetEnabled() bool {
	return p.Enabled
}

func (p *Event) GetFields() map[string]string {
	return p.Fields
}

func (p *Event) GetFilters() map[string]string {
	return p.Filters
}
func (p *Event) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Event) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.EventID = v
	}
	return nil
}

func (p *Event) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *Event) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Fields = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.Fields[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Event) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Filters = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val5 = v
		}
		p.Filters[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Event) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Event"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Event) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:eventID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EventID)); err != nil {
		return fmt.Errorf("%T.eventID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:eventID: %s", p, err)
	}
	return err
}

func (p *Event) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:enabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return fmt.Errorf("%T.enabled (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:enabled: %s", p, err)
	}
	return err
}

func (p *Event) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fields", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:fields: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Fields)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Fields {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:fields: %s", p, err)
	}
	return err
}

func (p *Event) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filters", thrift.MAP, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:filters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Filters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Filters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:filters: %s", p, err)
	}
	return err
}

func (p *Event) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Event(%+v)", *p)
}

type Flash struct {
	FlashID     string            `thrift:"flashID,1" json:"flashID"`
	VisitID     string            `thrift:"visitID,2" json:"visitID"`
	EventID     string            `thrift:"eventID,3" json:"eventID"`
	Timestamp   int64             `thrift:"timestamp,4" json:"timestamp"`
	VisitFields map[string]string `thrift:"visitFields,5" json:"visitFields"`
	EventFields map[string]string `thrift:"eventFields,6" json:"eventFields"`
}

func NewFlash() *Flash {
	return &Flash{}
}

func (p *Flash) GetFlashID() string {
	return p.FlashID
}

func (p *Flash) GetVisitID() string {
	return p.VisitID
}

func (p *Flash) GetEventID() string {
	return p.EventID
}

func (p *Flash) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *Flash) GetVisitFields() map[string]string {
	return p.VisitFields
}

func (p *Flash) GetEventFields() map[string]string {
	return p.EventFields
}
func (p *Flash) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Flash) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FlashID = v
	}
	return nil
}

func (p *Flash) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.VisitID = v
	}
	return nil
}

func (p *Flash) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EventID = v
	}
	return nil
}

func (p *Flash) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Flash) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.VisitFields = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.VisitFields[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Flash) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.EventFields = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val9 = v
		}
		p.EventFields[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Flash) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Flash"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Flash) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flashID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:flashID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FlashID)); err != nil {
		return fmt.Errorf("%T.flashID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:flashID: %s", p, err)
	}
	return err
}

func (p *Flash) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visitID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:visitID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VisitID)); err != nil {
		return fmt.Errorf("%T.visitID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:visitID: %s", p, err)
	}
	return err
}

func (p *Flash) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventID", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:eventID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EventID)); err != nil {
		return fmt.Errorf("%T.eventID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:eventID: %s", p, err)
	}
	return err
}

func (p *Flash) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
	}
	return err
}

func (p *Flash) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visitFields", thrift.MAP, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:visitFields: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.VisitFields)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.VisitFields {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:visitFields: %s", p, err)
	}
	return err
}

func (p *Flash) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventFields", thrift.MAP, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:eventFields: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.EventFields)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.EventFields {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:eventFields: %s", p, err)
	}
	return err
}

func (p *Flash) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Flash(%+v)", *p)
}

type TrackResponse struct {
	Visit   *Visit   `thrift:"visit,1" json:"visit"`
	Flashes []*Flash `thrift:"flashes,2" json:"flashes"`
}

func NewTrackResponse() *TrackResponse {
	return &TrackResponse{}
}

var TrackResponse_Visit_DEFAULT *Visit

func (p *TrackResponse) GetVisit() *Visit {
	if !p.IsSetVisit() {
		return TrackResponse_Visit_DEFAULT
	}
	return p.Visit
}

func (p *TrackResponse) GetFlashes() []*Flash {
	return p.Flashes
}
func (p *TrackResponse) IsSetVisit() bool {
	return p.Visit != nil
}

func (p *TrackResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TrackResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Visit = &Visit{}
	if err := p.Visit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Visit, err)
	}
	return nil
}

func (p *TrackResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Flash, 0, size)
	p.Flashes = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Flash{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.Flashes = append(p.Flashes, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TrackResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TrackResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TrackResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("visit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:visit: %s", p, err)
	}
	if err := p.Visit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Visit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:visit: %s", p, err)
	}
	return err
}

func (p *TrackResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flashes", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:flashes: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Flashes)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Flashes {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:flashes: %s", p, err)
	}
	return err
}

func (p *TrackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrackResponse(%+v)", *p)
}
